# A unit fraction contains 1 in the numerator.
# The decimal representation of the unit fractions with denominators 2 to 10 are given:

# 1/2  = 0.5
# 1/3  = 0.(3)
# 1/4  = 0.25
# 1/5  = 0.2
# 1/6  = 0.1(6)
# 1/7  = 0.(142857)
# 1/8  = 0.125
# 1/9  = 0.(1)
# 1/10 = 0.1

# Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle.
# It can be seen that 1/7 has a 6-digit recurring cycle.

# Find the value of d < 1000 for which 1/d contains the longest recurring cycle in its decimal fraction part.

require 'bigdecimal'

def loop_len(x)
  over_x = (BigDecimal(10) ** 10000) / x
  clean_string = over_x.to_s('F').delete('.')
  matches = clean_string.scan(/(.+?)\1+/)
  top = matches.map(&:first).map(&:length).max
  top || 0
end

best = 0
best_index = 0

(1..1001).each do |x|
  current = loop_len(x)
  if current > best
    best = current
    best_index = x
  end
end

puts best_index
# 983

# 101729399796541200406917599186164801627670396744659206510681586978
# 636826042726347914547304170905391658189216683621566632756866734486
# 266531027466937945066124109867751780264496439471007121057985757884
# 028484231943031536113936927772126144455747711088504577822990844354
# 018311291963377416073245167853509664292980671414038657171922685656
# 154628687690742624618514750762970498474059003051881993896236012207
# 527975584944048830111902339776195320447609359104781281790437436419
# 125127161749745676500508646998982706002034587995930824008138351983
# 723296032553407934893184130213631739572736520854526958290946083418
# 107833163784333672431332655137334689725330620549338758901322482197
# 355035605289928789420142421159715157680569684638860630722278738555
# 442522889114954221770091556459816887080366225839267548321464903357
# 070193285859613428280773143438453713123092573753814852492370295015
# 259409969481180061037639877924720244150559511698880976602238046795
# 5239064089521871820956256358087487283825025432349949135300

# the repitition is of length 982
