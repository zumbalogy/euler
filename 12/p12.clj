; The sequence of triangle numbers is generated by adding the natural numbers.
; The 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.

; The first 10: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55
; Listing the factors of the first seven triangle numbers:
;  1: 1
;  3: 1,3
;  6: 1,2,3,6
; 10: 1,2,5,10
; 15: 1,3,5,15
; 21: 1,3,7,21
; 28: 1,2,4,7,14,28

; 28 is the first triangle number to have over five divisors.
; What is the first triangle number to have over five hundred divisors?

; PERSONAL NOTE: binary searching (powers of 2) for number didnt seem to be working out
; perf wise, the number of factors is only loosley sorted.
; can jump by 100 and quickly find a neighbor of 12375, but picking 100 seems cheating

; TODO: maybe a generator for the triangles would be faster (only adding, no division), using lazy-seq or such
; TODO: try out a parrallel filter function http://clojure.com/blog/2012/05/08/reducers-a-library-and-model-for-collection-processing.html

(defn triangle [x]
  (* (inc x) (/ x 2)))

(defn count-factors [x]
  (* 2 (count (filter
    #(zero? (rem x %))
    (range 1 (Math/sqrt x))))))

(time (println
  (first (filter #(< 500 (count-factors %)) (map triangle (range))))))
; 76576500
; the 12375 triangle number
